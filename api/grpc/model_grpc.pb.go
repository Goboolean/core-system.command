// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: api/grpc/model.proto

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	RegisterModel(ctx context.Context, in *RegisterModelRequest, opts ...grpc.CallOption) (*RegisterModelResponse, error)
	// Returns to the stream what state the model being simulated is in.
	// When the simulation is finished, return access_token
	// and allow the result to be retrieved from the join server.
	SimulationModel(ctx context.Context, in *SimulationModelRequest, opts ...grpc.CallOption) (ModelService_SimulationModelClient, error)
	EditModel(ctx context.Context, in *EditModelRequest, opts ...grpc.CallOption) (*EditModelResponse, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) RegisterModel(ctx context.Context, in *RegisterModelRequest, opts ...grpc.CallOption) (*RegisterModelResponse, error) {
	out := new(RegisterModelResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ModelService/RegisterModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) SimulationModel(ctx context.Context, in *SimulationModelRequest, opts ...grpc.CallOption) (ModelService_SimulationModelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[0], "/grpcapi.ModelService/SimulationModel", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServiceSimulationModelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModelService_SimulationModelClient interface {
	Recv() (*SimulationStatus, error)
	grpc.ClientStream
}

type modelServiceSimulationModelClient struct {
	grpc.ClientStream
}

func (x *modelServiceSimulationModelClient) Recv() (*SimulationStatus, error) {
	m := new(SimulationStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelServiceClient) EditModel(ctx context.Context, in *EditModelRequest, opts ...grpc.CallOption) (*EditModelResponse, error) {
	out := new(EditModelResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.ModelService/EditModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	RegisterModel(context.Context, *RegisterModelRequest) (*RegisterModelResponse, error)
	// Returns to the stream what state the model being simulated is in.
	// When the simulation is finished, return access_token
	// and allow the result to be retrieved from the join server.
	SimulationModel(*SimulationModelRequest, ModelService_SimulationModelServer) error
	EditModel(context.Context, *EditModelRequest) (*EditModelResponse, error)
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) RegisterModel(context.Context, *RegisterModelRequest) (*RegisterModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterModel not implemented")
}
func (UnimplementedModelServiceServer) SimulationModel(*SimulationModelRequest, ModelService_SimulationModelServer) error {
	return status.Errorf(codes.Unimplemented, "method SimulationModel not implemented")
}
func (UnimplementedModelServiceServer) EditModel(context.Context, *EditModelRequest) (*EditModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditModel not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_RegisterModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RegisterModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ModelService/RegisterModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RegisterModel(ctx, req.(*RegisterModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_SimulationModel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimulationModelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModelServiceServer).SimulationModel(m, &modelServiceSimulationModelServer{stream})
}

type ModelService_SimulationModelServer interface {
	Send(*SimulationStatus) error
	grpc.ServerStream
}

type modelServiceSimulationModelServer struct {
	grpc.ServerStream
}

func (x *modelServiceSimulationModelServer) Send(m *SimulationStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ModelService_EditModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).EditModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ModelService/EditModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).EditModel(ctx, req.(*EditModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterModel",
			Handler:    _ModelService_RegisterModel_Handler,
		},
		{
			MethodName: "EditModel",
			Handler:    _ModelService_EditModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SimulationModel",
			Handler:       _ModelService_SimulationModel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/grpc/model.proto",
}
