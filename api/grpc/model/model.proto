/*
Package grpcapi provides the interface of the gRPC methods.

All commands for services to model management are provided by this interfaces.

Generate gRPC code:
  protoc --go_out=. --go_opt=paths=source_relative \
  --go-grpc_out=. --go-grpc_opt=paths=source_relative \
  api/grpc/model.proto
*/
syntax = "proto3";

package grpcapi;

option go_package = "github.com/Goboolean/command-server/api/grpc;grpcapi";

// ModelService
//
// Provides services to model management
service ModelService {

  rpc RegisterModel(RegisterModelRequest) returns (RegisterModelResponse) {}

  // Returns to the stream what state the model being simulated is in.
  // When the simulation is finished, return access_token
  // and allow the result to be retrieved from the join server.
  rpc SimulationModel(SimulationModelRequest) returns (stream SimulationStatus) {}

  rpc EditModel(EditModelRequest) returns (EditModelResponse) {}

  rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {}
}


// need implement
message RegisterModelRequest {
  string user_token = 1;
  // need to add model info
}

message RegisterModelResponse {
  int32 status = 1;
  string model_id = 2;
}


// need implement about parameter
message SimulationModelRequest {
  string user_token = 1;
  string model_id = 2;
  string stock_id = 3;
  repeated int64 parameter = 4;
}

message SimulationStatus {
  int32 status = 1;         // simulation status
  string access_token = 2;  // token for accessing join server
}


// need implement
message EditModelRequest {
  string user_token = 1;
  string model_id = 2;
  // need to add model info
}

message EditModelResponse {
  int32 status = 1;
}


message DeleteModelRequest {
  string user_token = 1;
  string model_id = 2;
}

message DeleteModelResponse {
  int32 status = 1;
}